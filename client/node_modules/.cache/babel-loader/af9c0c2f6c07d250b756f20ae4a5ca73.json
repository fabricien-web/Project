{"ast":null,"code":"/*\r\n * Copyright 2014-2016 the original author or authors\r\n * @license MIT, see LICENSE.txt for details\r\n *\r\n * @author Scott Andrews\r\n */\n'use strict';\n/**\r\n * Plain JS Object containing properties that represent an HTTP request.\r\n *\r\n * Depending on the capabilities of the underlying client, a request\r\n * may be cancelable. If a request may be canceled, the client will add\r\n * a canceled flag and cancel function to the request object. Canceling\r\n * the request will put the response into an error state.\r\n *\r\n * @field {string} [method='GET'] HTTP method, commonly GET, POST, PUT, DELETE or HEAD\r\n * @field {string|UrlBuilder} [path=''] path template with optional path variables\r\n * @field {Object} [params] parameters for the path template and query string\r\n * @field {Object} [headers] custom HTTP headers to send, in addition to the clients default headers\r\n * @field [entity] the HTTP entity, common for POST or PUT requests\r\n * @field {boolean} [canceled] true if the request has been canceled, set by the client\r\n * @field {Function} [cancel] cancels the request if invoked, provided by the client\r\n * @field {Client} [originator] the client that first handled this request, provided by the interceptor\r\n *\r\n * @class Request\r\n */\n\n/**\r\n * Plain JS Object containing properties that represent an HTTP response\r\n *\r\n * @field {Object} [request] the request object as received by the root client\r\n * @field {Object} [raw] the underlying request object, like XmlHttpRequest in a browser\r\n * @field {number} [status.code] status code of the response (i.e. 200, 404)\r\n * @field {string} [status.text] status phrase of the response\r\n * @field {Object] [headers] response headers hash of normalized name, value pairs\r\n * @field [entity] the response body\r\n *\r\n * @class Response\r\n */\n\n/**\r\n * HTTP client particularly suited for RESTful operations.\r\n *\r\n * @field {function} wrap wraps this client with a new interceptor returning the wrapped client\r\n *\r\n * @param {Request} the HTTP request\r\n * @returns {ResponsePromise<Response>} a promise the resolves to the HTTP response\r\n *\r\n * @class Client\r\n */\n\n/**\r\n * Extended when.js Promises/A+ promise with HTTP specific helpers\r\n *q\r\n * @method entity promise for the HTTP entity\r\n * @method status promise for the HTTP status code\r\n * @method headers promise for the HTTP response headers\r\n * @method header promise for a specific HTTP response header\r\n *\r\n * @class ResponsePromise\r\n * @extends Promise\r\n */\n\nvar client, target, platformDefault;\nclient = require('../client');\n\nif (typeof Promise !== 'function' && console && console.log) {\n  console.log('An ES6 Promise implementation is required to use rest.js. See https://github.com/cujojs/when/blob/master/docs/es6-promise-shim.md for using when.js as a Promise polyfill.');\n}\n/**\r\n * Make a request with the default client\r\n * @param {Request} the HTTP request\r\n * @returns {Promise<Response>} a promise the resolves to the HTTP response\r\n */\n\n\nfunction defaultClient() {\n  return target.apply(void 0, arguments);\n}\n/**\r\n * Change the default client\r\n * @param {Client} client the new default client\r\n */\n\n\ndefaultClient.setDefaultClient = function setDefaultClient(client) {\n  target = client;\n};\n/**\r\n * Obtain a direct reference to the current default client\r\n * @returns {Client} the default client\r\n */\n\n\ndefaultClient.getDefaultClient = function getDefaultClient() {\n  return target;\n};\n/**\r\n * Reset the default client to the platform default\r\n */\n\n\ndefaultClient.resetDefaultClient = function resetDefaultClient() {\n  target = platformDefault;\n};\n/**\r\n * @private\r\n */\n\n\ndefaultClient.setPlatformDefaultClient = function setPlatformDefaultClient(client) {\n  if (platformDefault) {\n    throw new Error('Unable to redefine platformDefaultClient');\n  }\n\n  target = platformDefault = client;\n};\n\nmodule.exports = client(defaultClient);","map":{"version":3,"sources":["C:/Users/Fabricien/Documents/Projet/fabTravel/client/node_modules/rest/client/default.js"],"names":["client","target","platformDefault","require","Promise","console","log","defaultClient","apply","arguments","setDefaultClient","getDefaultClient","resetDefaultClient","setPlatformDefaultClient","Error","module","exports"],"mappings":"AAAA;;;;;;AAOA;AAEA;;;;;;;;;;;;;;;;;;;;AAoBA;;;;;;;;;;;;;AAaA;;;;;;;;;;;AAWC;;;;;;;;;;;;AAYD,IAAIA,MAAJ,EAAYC,MAAZ,EAAoBC,eAApB;AAEAF,MAAM,GAAGG,OAAO,CAAC,WAAD,CAAhB;;AAEA,IAAI,OAAOC,OAAP,KAAmB,UAAnB,IAAiCC,OAAjC,IAA4CA,OAAO,CAACC,GAAxD,EAA6D;AAC5DD,EAAAA,OAAO,CAACC,GAAR,CAAY,4KAAZ;AACA;AAED;;;;;;;AAKA,SAASC,aAAT,GAAyB;AACxB,SAAON,MAAM,CAACO,KAAP,CAAa,KAAK,CAAlB,EAAqBC,SAArB,CAAP;AACA;AAED;;;;;;AAIAF,aAAa,CAACG,gBAAd,GAAiC,SAASA,gBAAT,CAA0BV,MAA1B,EAAkC;AAClEC,EAAAA,MAAM,GAAGD,MAAT;AACA,CAFD;AAIA;;;;;;AAIAO,aAAa,CAACI,gBAAd,GAAiC,SAASA,gBAAT,GAA4B;AAC5D,SAAOV,MAAP;AACA,CAFD;AAIA;;;;;AAGAM,aAAa,CAACK,kBAAd,GAAmC,SAASA,kBAAT,GAA8B;AAChEX,EAAAA,MAAM,GAAGC,eAAT;AACA,CAFD;AAIA;;;;;AAGAK,aAAa,CAACM,wBAAd,GAAyC,SAASA,wBAAT,CAAkCb,MAAlC,EAA0C;AAClF,MAAIE,eAAJ,EAAqB;AACpB,UAAM,IAAIY,KAAJ,CAAU,0CAAV,CAAN;AACA;;AACDb,EAAAA,MAAM,GAAGC,eAAe,GAAGF,MAA3B;AACA,CALD;;AAOAe,MAAM,CAACC,OAAP,GAAiBhB,MAAM,CAACO,aAAD,CAAvB","sourcesContent":["/*\r\n * Copyright 2014-2016 the original author or authors\r\n * @license MIT, see LICENSE.txt for details\r\n *\r\n * @author Scott Andrews\r\n */\r\n\r\n'use strict';\r\n\r\n/**\r\n * Plain JS Object containing properties that represent an HTTP request.\r\n *\r\n * Depending on the capabilities of the underlying client, a request\r\n * may be cancelable. If a request may be canceled, the client will add\r\n * a canceled flag and cancel function to the request object. Canceling\r\n * the request will put the response into an error state.\r\n *\r\n * @field {string} [method='GET'] HTTP method, commonly GET, POST, PUT, DELETE or HEAD\r\n * @field {string|UrlBuilder} [path=''] path template with optional path variables\r\n * @field {Object} [params] parameters for the path template and query string\r\n * @field {Object} [headers] custom HTTP headers to send, in addition to the clients default headers\r\n * @field [entity] the HTTP entity, common for POST or PUT requests\r\n * @field {boolean} [canceled] true if the request has been canceled, set by the client\r\n * @field {Function} [cancel] cancels the request if invoked, provided by the client\r\n * @field {Client} [originator] the client that first handled this request, provided by the interceptor\r\n *\r\n * @class Request\r\n */\r\n\r\n/**\r\n * Plain JS Object containing properties that represent an HTTP response\r\n *\r\n * @field {Object} [request] the request object as received by the root client\r\n * @field {Object} [raw] the underlying request object, like XmlHttpRequest in a browser\r\n * @field {number} [status.code] status code of the response (i.e. 200, 404)\r\n * @field {string} [status.text] status phrase of the response\r\n * @field {Object] [headers] response headers hash of normalized name, value pairs\r\n * @field [entity] the response body\r\n *\r\n * @class Response\r\n */\r\n\r\n/**\r\n * HTTP client particularly suited for RESTful operations.\r\n *\r\n * @field {function} wrap wraps this client with a new interceptor returning the wrapped client\r\n *\r\n * @param {Request} the HTTP request\r\n * @returns {ResponsePromise<Response>} a promise the resolves to the HTTP response\r\n *\r\n * @class Client\r\n */\r\n\r\n /**\r\n  * Extended when.js Promises/A+ promise with HTTP specific helpers\r\n  *q\r\n  * @method entity promise for the HTTP entity\r\n  * @method status promise for the HTTP status code\r\n  * @method headers promise for the HTTP response headers\r\n  * @method header promise for a specific HTTP response header\r\n  *\r\n  * @class ResponsePromise\r\n  * @extends Promise\r\n  */\r\n\r\nvar client, target, platformDefault;\r\n\r\nclient = require('../client');\r\n\r\nif (typeof Promise !== 'function' && console && console.log) {\r\n\tconsole.log('An ES6 Promise implementation is required to use rest.js. See https://github.com/cujojs/when/blob/master/docs/es6-promise-shim.md for using when.js as a Promise polyfill.');\r\n}\r\n\r\n/**\r\n * Make a request with the default client\r\n * @param {Request} the HTTP request\r\n * @returns {Promise<Response>} a promise the resolves to the HTTP response\r\n */\r\nfunction defaultClient() {\r\n\treturn target.apply(void 0, arguments);\r\n}\r\n\r\n/**\r\n * Change the default client\r\n * @param {Client} client the new default client\r\n */\r\ndefaultClient.setDefaultClient = function setDefaultClient(client) {\r\n\ttarget = client;\r\n};\r\n\r\n/**\r\n * Obtain a direct reference to the current default client\r\n * @returns {Client} the default client\r\n */\r\ndefaultClient.getDefaultClient = function getDefaultClient() {\r\n\treturn target;\r\n};\r\n\r\n/**\r\n * Reset the default client to the platform default\r\n */\r\ndefaultClient.resetDefaultClient = function resetDefaultClient() {\r\n\ttarget = platformDefault;\r\n};\r\n\r\n/**\r\n * @private\r\n */\r\ndefaultClient.setPlatformDefaultClient = function setPlatformDefaultClient(client) {\r\n\tif (platformDefault) {\r\n\t\tthrow new Error('Unable to redefine platformDefaultClient');\r\n\t}\r\n\ttarget = platformDefault = client;\r\n};\r\n\r\nmodule.exports = client(defaultClient);\r\n"]},"metadata":{},"sourceType":"script"}