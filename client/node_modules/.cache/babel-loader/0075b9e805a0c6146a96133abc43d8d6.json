{"ast":null,"code":"/*\r\n * Copyright 2012-2016 the original author or authors\r\n * @license MIT, see LICENSE.txt for details\r\n *\r\n * @author Scott Andrews\r\n */\n'use strict';\n\nvar interceptor;\ninterceptor = require('../interceptor');\n/**\r\n * Rejects the response promise based on the status code.\r\n *\r\n * Codes greater than or equal to the provided value are rejected.  Default\r\n * value 400.\r\n *\r\n * @param {Client} [client] client to wrap\r\n * @param {number} [config.code=400] code to indicate a rejection\r\n *\r\n * @returns {Client}\r\n */\n\nmodule.exports = interceptor({\n  init: function (config) {\n    config.code = config.code || 400;\n    return config;\n  },\n  response: function (response, config) {\n    if (response.status && response.status.code >= config.code) {\n      return Promise.reject(response);\n    }\n\n    return response;\n  }\n});","map":{"version":3,"sources":["C:/Users/Fabricien/Documents/Projet/fabTravel/client/node_modules/rest/interceptor/errorCode.js"],"names":["interceptor","require","module","exports","init","config","code","response","status","Promise","reject"],"mappings":"AAAA;;;;;;AAOA;;AAEA,IAAIA,WAAJ;AAEAA,WAAW,GAAGC,OAAO,CAAC,gBAAD,CAArB;AAEA;;;;;;;;;;;;AAWAC,MAAM,CAACC,OAAP,GAAiBH,WAAW,CAAC;AAC5BI,EAAAA,IAAI,EAAE,UAAUC,MAAV,EAAkB;AACvBA,IAAAA,MAAM,CAACC,IAAP,GAAcD,MAAM,CAACC,IAAP,IAAe,GAA7B;AACA,WAAOD,MAAP;AACA,GAJ2B;AAK5BE,EAAAA,QAAQ,EAAE,UAAUA,QAAV,EAAoBF,MAApB,EAA4B;AACrC,QAAIE,QAAQ,CAACC,MAAT,IAAmBD,QAAQ,CAACC,MAAT,CAAgBF,IAAhB,IAAwBD,MAAM,CAACC,IAAtD,EAA4D;AAC3D,aAAOG,OAAO,CAACC,MAAR,CAAeH,QAAf,CAAP;AACA;;AACD,WAAOA,QAAP;AACA;AAV2B,CAAD,CAA5B","sourcesContent":["/*\r\n * Copyright 2012-2016 the original author or authors\r\n * @license MIT, see LICENSE.txt for details\r\n *\r\n * @author Scott Andrews\r\n */\r\n\r\n'use strict';\r\n\r\nvar interceptor;\r\n\r\ninterceptor = require('../interceptor');\r\n\r\n/**\r\n * Rejects the response promise based on the status code.\r\n *\r\n * Codes greater than or equal to the provided value are rejected.  Default\r\n * value 400.\r\n *\r\n * @param {Client} [client] client to wrap\r\n * @param {number} [config.code=400] code to indicate a rejection\r\n *\r\n * @returns {Client}\r\n */\r\nmodule.exports = interceptor({\r\n\tinit: function (config) {\r\n\t\tconfig.code = config.code || 400;\r\n\t\treturn config;\r\n\t},\r\n\tresponse: function (response, config) {\r\n\t\tif (response.status && response.status.code >= config.code) {\r\n\t\t\treturn Promise.reject(response);\r\n\t\t}\r\n\t\treturn response;\r\n\t}\r\n});\r\n"]},"metadata":{},"sourceType":"script"}