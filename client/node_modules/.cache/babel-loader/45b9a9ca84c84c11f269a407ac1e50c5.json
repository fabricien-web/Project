{"ast":null,"code":"/*\r\n * Copyright 2013-2016 the original author or authors\r\n * @license MIT, see LICENSE.txt for details\r\n *\r\n * @author Scott Andrews\r\n */\n'use strict';\n\nvar attempt = require('./attempt');\n/**\r\n * Create a promise whose work is started only when a handler is registered.\r\n *\r\n * The work function will be invoked at most once. Thrown values will result\r\n * in promise rejection.\r\n *\r\n * @param {Function} work function whose ouput is used to resolve the\r\n *   returned promise.\r\n * @returns {Promise} a lazy promise\r\n */\n\n\nfunction lazyPromise(work) {\n  var started, resolver, promise, then;\n  started = false;\n  promise = new Promise(function (resolve, reject) {\n    resolver = {\n      resolve: resolve,\n      reject: reject\n    };\n  });\n  then = promise.then;\n\n  promise.then = function () {\n    if (!started) {\n      started = true;\n      attempt(work).then(resolver.resolve, resolver.reject);\n    }\n\n    return then.apply(promise, arguments);\n  };\n\n  return promise;\n}\n\nmodule.exports = lazyPromise;","map":{"version":3,"sources":["C:/Users/Fabricien/Documents/Projet/fabTravel/client/node_modules/rest/util/lazyPromise.js"],"names":["attempt","require","lazyPromise","work","started","resolver","promise","then","Promise","resolve","reject","apply","arguments","module","exports"],"mappings":"AAAA;;;;;;AAOA;;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,WAAD,CAArB;AAEA;;;;;;;;;;;;AAUA,SAASC,WAAT,CAAqBC,IAArB,EAA2B;AAC1B,MAAIC,OAAJ,EAAaC,QAAb,EAAuBC,OAAvB,EAAgCC,IAAhC;AAEAH,EAAAA,OAAO,GAAG,KAAV;AAEAE,EAAAA,OAAO,GAAG,IAAIE,OAAJ,CAAY,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AAChDL,IAAAA,QAAQ,GAAG;AACVI,MAAAA,OAAO,EAAEA,OADC;AAEVC,MAAAA,MAAM,EAAEA;AAFE,KAAX;AAIA,GALS,CAAV;AAMAH,EAAAA,IAAI,GAAGD,OAAO,CAACC,IAAf;;AAEAD,EAAAA,OAAO,CAACC,IAAR,GAAe,YAAY;AAC1B,QAAI,CAACH,OAAL,EAAc;AACbA,MAAAA,OAAO,GAAG,IAAV;AACAJ,MAAAA,OAAO,CAACG,IAAD,CAAP,CAAcI,IAAd,CAAmBF,QAAQ,CAACI,OAA5B,EAAqCJ,QAAQ,CAACK,MAA9C;AACA;;AACD,WAAOH,IAAI,CAACI,KAAL,CAAWL,OAAX,EAAoBM,SAApB,CAAP;AACA,GAND;;AAQA,SAAON,OAAP;AACA;;AAEDO,MAAM,CAACC,OAAP,GAAiBZ,WAAjB","sourcesContent":["/*\r\n * Copyright 2013-2016 the original author or authors\r\n * @license MIT, see LICENSE.txt for details\r\n *\r\n * @author Scott Andrews\r\n */\r\n\r\n'use strict';\r\n\r\nvar attempt = require('./attempt');\r\n\r\n/**\r\n * Create a promise whose work is started only when a handler is registered.\r\n *\r\n * The work function will be invoked at most once. Thrown values will result\r\n * in promise rejection.\r\n *\r\n * @param {Function} work function whose ouput is used to resolve the\r\n *   returned promise.\r\n * @returns {Promise} a lazy promise\r\n */\r\nfunction lazyPromise(work) {\r\n\tvar started, resolver, promise, then;\r\n\r\n\tstarted = false;\r\n\r\n\tpromise = new Promise(function (resolve, reject) {\r\n\t\tresolver = {\r\n\t\t\tresolve: resolve,\r\n\t\t\treject: reject\r\n\t\t};\r\n\t});\r\n\tthen = promise.then;\r\n\r\n\tpromise.then = function () {\r\n\t\tif (!started) {\r\n\t\t\tstarted = true;\r\n\t\t\tattempt(work).then(resolver.resolve, resolver.reject);\r\n\t\t}\r\n\t\treturn then.apply(promise, arguments);\r\n\t};\r\n\r\n\treturn promise;\r\n}\r\n\r\nmodule.exports = lazyPromise;\r\n"]},"metadata":{},"sourceType":"script"}