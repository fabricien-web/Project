{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Fabricien\\\\Documents\\\\Projet\\\\fabTravel\\\\client\\\\src\\\\components\\\\View\\\\View.js\";\nimport React, { Component } from \"react\";\nimport \"./View.css\";\nimport API from \"../../utils/API\";\nimport { Modal, Button, Row, Input, Col, CardPanel, Card, Navbar, NavItem, Dropdown } from \"react-materialize\";\nimport Nav_Bar from \"../NavBar\";\nimport { Link } from \"react-router-dom\";\nimport mapboxgl from 'mapbox-gl';\nimport MapboxGeocoder from 'mapbox-gl-geocoder';\nimport DetailsCard2 from \"../DetailsCard2\";\nvar userToken = window.localStorage.getItem(\"token\");\nvar name = window.localStorage.getItem(\"name\");\nvar cityCoords = [];\nvar map;\n\nclass View extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleInputChange = event => {\n      let value = event.target.value;\n      let name = event.target.name;\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.handleSubmitSignUp = e => {\n      e.preventDefault();\n    };\n\n    this.updateCities = coord => {\n      this.setState({\n        cityCoords: coord\n      });\n      console.log(this.state.cityCoords);\n    };\n\n    this.userSelect = event => {\n      event.preventDefault();\n      console.log(\"event\", event.target);\n      window.localStorage.setItem(\"name\", event.target.value); // this.setState({ user: event.target.value })\n    };\n\n    this.state = {\n      userCitiesData: [],\n      user: \"\",\n      token: '',\n      cityCoords: [],\n      geojson: {\n        type: 'FeatureCollection',\n        features: []\n      },\n      userList: [],\n      loggedAs: \"\"\n    };\n    this.userSelect = this.userSelect.bind(this);\n  }\n\n  getUserData() {\n    console.log(\"name\", name);\n    API.getUserByName(name).then(result => {\n      console.log(\"result\", result);\n      this.setState({\n        userCitiesData: result.data.cities,\n        user: name\n      });\n      cityCoords = this.state.userCitiesData.map(data => {\n        return data.coordinates;\n      });\n      this.updateCities(cityCoords);\n    });\n  }\n\n  currentUser() {\n    API.getCurrentUser(userToken).then(res => {\n      console.log(\"userNAME\", res);\n      this.setState({\n        loggedAs: res.data.username\n      });\n    });\n  }\n\n  logOut() {\n    window.localStorage.clear();\n    window.location = \"/\";\n  }\n\n  populateUsers() {\n    API.getUsers().then(res => {\n      this.setState({\n        userList: res.data\n      });\n    });\n  }\n\n  componentDidMount() {\n    this.setState({\n      token: userToken\n    });\n    this.getUserData();\n    this.populateUsers();\n    this.currentUser();\n    name = window.localStorage.getItem('name');\n    console.log(\"current user:\", name);\n    console.log('component is mounted');\n    mapboxgl.accessToken = 'pk.eyJ1IjoiYXJoZWVlZSIsImEiOiJjamdjeXZsaGswNmk0MzJtYWM5MXJxdWhlIn0.YLMP3IJkPnF-y8Yv0A8Udg';\n    map = new mapboxgl.Map({\n      container: 'map',\n      style: 'mapbox://styles/arheeee/cjgcyypkq00032sqkj85b2any',\n      center: [20.107686, 31.863775],\n      zoom: 1\n    });\n    var geojson = {\n      type: 'FeatureCollection',\n      features: []\n    };\n    this.state.userCitiesData.forEach(dat => {\n      var cityFeature = {\n        type: 'Feature',\n        geometry: {\n          type: 'LineString',\n          coordinates: dat.coordinates\n        },\n        properties: {\n          title: \"City\",\n          description: dat.location\n        }\n      };\n      geojson.features.push(cityFeature);\n    });\n    geojson.features.forEach(marker => {\n      console.log(\"marker\", marker); // create a HTML element for each feature\n\n      var el = document.createElement('div');\n      el.className = 'marker'; // make a marker for each feature and add to the map\n\n      new mapboxgl.Marker(el).setLngLat(marker.geometry.coordinates).setPopup(new mapboxgl.Popup({\n        offset: 25\n      }) // add popups\n      .setHTML('<p>' + marker.properties.description + '</p>')).addTo(map);\n    });\n    var speedFactor = 30; // number of frames per longitude degree\n\n    var animation; // to store and cancel the animation\n\n    var startTime = 0;\n    var progress = 0; // progress = timestamp - startTime\n\n    var resetTime = false; // indicator of whether time reset is needed for the animation\n\n    map.on('load', () => {\n      console.log(\"geojson\", this.state.geojson);\n      let lineCoords = this.state.geojson.features.map(place => place.geometry.coordinates);\n      console.log(\"linecoords\", lineCoords); // add the line which will be modified in the animation\n\n      map.addLayer({\n        \"id\": \"route\",\n        \"type\": \"line\",\n        \"source\": {\n          \"type\": \"geojson\",\n          \"data\": {\n            \"type\": \"Feature\",\n            \"properties\": {},\n            \"geometry\": {\n              \"type\": \"LineString\",\n              \"coordinates\": lineCoords\n            }\n          }\n        },\n        \"layout\": {\n          \"line-join\": \"round\",\n          \"line-cap\": \"round\"\n        },\n        \"paint\": {\n          \"line-color\": \"#96F550\",\n          \"line-width\": 3\n        }\n      });\n    });\n  }\n\n  render() {\n    this.state.userCitiesData.forEach(dat => {\n      var cityFeature = {\n        type: 'Feature',\n        geometry: {\n          type: 'LineString',\n          coordinates: dat.coordinates\n        },\n        properties: {\n          title: \"City\",\n          description: dat.location\n        }\n      };\n      this.state.geojson.features.push(cityFeature);\n    });\n    this.state.geojson.features.forEach(marker => {\n      console.log(\"marker\", marker); // create a HTML element for each feature\n\n      var el = document.createElement('div');\n      el.className = 'marker'; // make a marker for each feature and add to the map\n\n      new mapboxgl.Marker(el).setLngLat(marker.geometry.coordinates).setPopup(new mapboxgl.Popup({\n        offset: 25\n      }) // add popups\n      .setHTML('<p>' + marker.properties.description + '</p>')).addTo(map);\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Navbar, {\n      brand: /*#__PURE__*/React.createElement(\"img\", {\n        id: \"logo\",\n        src: \"uploads/logo.png\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 32\n        }\n      }),\n      right: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(NavItem, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      s: 2,\n      onChange: this.userSelect,\n      type: \"select\",\n      label: \"Materialize Select\",\n      value: name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 25\n      }\n    }, this.state.userList.map(result => /*#__PURE__*/React.createElement(\"option\", {\n      onClick: this.userSelect,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 33\n      }\n    }, result.name)))), /*#__PURE__*/React.createElement(NavItem, {\n      href: \"/create\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 21\n      }\n    }, \"Create\"), /*#__PURE__*/React.createElement(NavItem, {\n      href: \"/view\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 21\n      }\n    }, \"View\"), /*#__PURE__*/React.createElement(NavItem, {\n      onClick: this.logOut,\n      href: \"/\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 21\n      }\n    }, this.state.loggedAs, \": Log Out\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"mapContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"map\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(DetailsCard2, {\n      data: this.state.userCitiesData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 25\n      }\n    }));\n  }\n\n}\n\nexport default View;","map":{"version":3,"sources":["C:/Users/Fabricien/Documents/Projet/fabTravel/client/src/components/View/View.js"],"names":["React","Component","API","Modal","Button","Row","Input","Col","CardPanel","Card","Navbar","NavItem","Dropdown","Nav_Bar","Link","mapboxgl","MapboxGeocoder","DetailsCard2","userToken","window","localStorage","getItem","name","cityCoords","map","View","constructor","props","handleInputChange","event","value","target","setState","handleSubmitSignUp","e","preventDefault","updateCities","coord","console","log","state","userSelect","setItem","userCitiesData","user","token","geojson","type","features","userList","loggedAs","bind","getUserData","getUserByName","then","result","data","cities","coordinates","currentUser","getCurrentUser","res","username","logOut","clear","location","populateUsers","getUsers","componentDidMount","accessToken","Map","container","style","center","zoom","forEach","dat","cityFeature","geometry","properties","title","description","push","marker","el","document","createElement","className","Marker","setLngLat","setPopup","Popup","offset","setHTML","addTo","speedFactor","animation","startTime","progress","resetTime","on","lineCoords","place","addLayer","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./View.css\";\r\nimport API from \"../../utils/API\";\r\nimport { Modal, Button, Row, Input, Col, CardPanel, Card, Navbar, NavItem, Dropdown } from \"react-materialize\"\r\nimport Nav_Bar from \"../NavBar\"\r\nimport { Link } from \"react-router-dom\";\r\nimport mapboxgl from 'mapbox-gl'\r\nimport MapboxGeocoder from 'mapbox-gl-geocoder'\r\nimport DetailsCard2 from \"../DetailsCard2\";\r\n\r\nvar userToken = window.localStorage.getItem(\"token\")\r\nvar name = window.localStorage.getItem(\"name\")\r\n\r\nvar cityCoords = []\r\n\r\nvar map\r\n\r\nclass View extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            userCitiesData: [],\r\n            user: \"\",\r\n            token: '',\r\n            cityCoords: [],\r\n            geojson: {\r\n                type: 'FeatureCollection',\r\n                features: []\r\n            },\r\n            userList: [],\r\n            loggedAs: \"\"\r\n        }\r\n        this.userSelect = this.userSelect.bind(this);\r\n    }\r\n\r\n    handleInputChange = event => {\r\n        let value = event.target.value;\r\n        let name = event.target.name\r\n\r\n        this.setState({\r\n            [name]: value\r\n        });\r\n    };\r\n\r\n    handleSubmitSignUp = (e) => {\r\n        e.preventDefault();\r\n\r\n    }\r\n\r\n    updateCities = (coord) => {\r\n        this.setState({ cityCoords: coord })\r\n        console.log(this.state.cityCoords)\r\n    }\r\n\r\n    userSelect = (event) => {\r\n        event.preventDefault();\r\n        console.log(\"event\", event.target)\r\n\r\n        window.localStorage.setItem(\"name\", event.target.value)\r\n        // this.setState({ user: event.target.value })\r\n    }\r\n\r\n    getUserData() {\r\n        console.log(\"name\", name)\r\n        API.getUserByName(name).then((result) => {\r\n            console.log(\"result\", result)\r\n            this.setState({\r\n                userCitiesData: result.data.cities,\r\n                user: name\r\n            })\r\n\r\n            cityCoords = this.state.userCitiesData.map((data) => {\r\n                return (data.coordinates)\r\n            })\r\n\r\n            this.updateCities(cityCoords)\r\n        })\r\n    }\r\n\r\n    currentUser() {\r\n        API.getCurrentUser(userToken).then((res) => {\r\n\r\n            console.log(\"userNAME\", res)\r\n            this.setState({ loggedAs: res.data.username })\r\n        })\r\n    }\r\n\r\n    logOut() {\r\n        window.localStorage.clear();\r\n        window.location = \"/\"\r\n    }\r\n\r\n    populateUsers() {\r\n        API.getUsers().then((res) => {\r\n\r\n            this.setState({ userList: res.data })\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        this.setState({ token: userToken })\r\n\r\n        this.getUserData()\r\n\r\n        this.populateUsers()\r\n\r\n        this.currentUser()\r\n\r\n        name = window.localStorage.getItem('name')\r\n        console.log(\"current user:\", name)\r\n\r\n        console.log('component is mounted')\r\n\r\n        mapboxgl.accessToken = 'pk.eyJ1IjoiYXJoZWVlZSIsImEiOiJjamdjeXZsaGswNmk0MzJtYWM5MXJxdWhlIn0.YLMP3IJkPnF-y8Yv0A8Udg';\r\n        map = new mapboxgl.Map({\r\n            container: 'map',\r\n            style: 'mapbox://styles/arheeee/cjgcyypkq00032sqkj85b2any',\r\n            center: [20.107686, 31.863775],\r\n            zoom: 1\r\n        });\r\n\r\n        var geojson = {\r\n            type: 'FeatureCollection',\r\n            features: []\r\n        };\r\n\r\n        this.state.userCitiesData.forEach((dat) => {\r\n            var cityFeature = {\r\n                type: 'Feature',\r\n                geometry: {\r\n                    type: 'LineString',\r\n                    coordinates: dat.coordinates\r\n                },\r\n                properties: {\r\n                    title: \"City\",\r\n                    description: dat.location\r\n                }\r\n            }\r\n\r\n            geojson.features.push(cityFeature)\r\n        })\r\n\r\n        geojson.features.forEach((marker) => {\r\n\r\n            console.log(\"marker\", marker)\r\n\r\n            // create a HTML element for each feature\r\n            var el = document.createElement('div');\r\n            el.className = 'marker';\r\n\r\n            // make a marker for each feature and add to the map\r\n            new mapboxgl.Marker(el)\r\n                .setLngLat(marker.geometry.coordinates)\r\n                .setPopup(new mapboxgl.Popup({ offset: 25 }) // add popups\r\n                    .setHTML('<p>' + marker.properties.description + '</p>'))\r\n                .addTo(map);\r\n        });\r\n\r\n        var speedFactor = 30; // number of frames per longitude degree\r\n        var animation; // to store and cancel the animation\r\n        var startTime = 0;\r\n        var progress = 0; // progress = timestamp - startTime\r\n        var resetTime = false; // indicator of whether time reset is needed for the animation\r\n        \r\n        map.on('load', () => {\r\n        \r\n            console.log(\"geojson\", this.state.geojson)\r\n\r\n            let lineCoords = this.state.geojson.features.map( (place) => (\r\n                place.geometry.coordinates ))\r\n            \r\n            console.log(\"linecoords\", lineCoords)\r\n            // add the line which will be modified in the animation\r\n            map.addLayer({\r\n                \"id\": \"route\",\r\n                \"type\": \"line\",\r\n                \"source\": {\r\n                    \"type\": \"geojson\",\r\n                    \"data\": {\r\n                        \"type\": \"Feature\",\r\n                        \"properties\": {},\r\n                        \"geometry\": {\r\n                            \"type\": \"LineString\",\r\n                            \"coordinates\": lineCoords                            \r\n                        }\r\n                    }\r\n                },\r\n                \"layout\": {\r\n                    \"line-join\": \"round\",\r\n                    \"line-cap\": \"round\"\r\n                },\r\n                \"paint\": {\r\n                    \"line-color\": \"#96F550\",\r\n                    \"line-width\": 3\r\n                }\r\n            });\r\n        \r\n          \r\n        });\r\n\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        this.state.userCitiesData.forEach((dat) => {\r\n            var cityFeature = {\r\n                type: 'Feature',\r\n                geometry: {\r\n                    type: 'LineString',\r\n                    coordinates: dat.coordinates\r\n                },\r\n                properties: {\r\n                    title: \"City\",\r\n                    description: dat.location\r\n                }\r\n            }\r\n\r\n            this.state.geojson.features.push(cityFeature)\r\n        })\r\n\r\n        this.state.geojson.features.forEach((marker) => {\r\n\r\n            console.log(\"marker\", marker)\r\n\r\n            // create a HTML element for each feature\r\n            var el = document.createElement('div');\r\n            el.className = 'marker';\r\n\r\n            // make a marker for each feature and add to the map\r\n            new mapboxgl.Marker(el)\r\n                .setLngLat(marker.geometry.coordinates)\r\n                .setPopup(new mapboxgl.Popup({ offset: 25 }) // add popups\r\n                    .setHTML('<p>' + marker.properties.description + '</p>'))\r\n                .addTo(map);\r\n        });\r\n\r\n        return (\r\n\r\n            <div>\r\n                <Navbar brand={<img id=\"logo\" src=\"uploads/logo.png\" />} right>\r\n                    <NavItem>\r\n                        <Input s={2} onChange={this.userSelect} type='select' label=\"Materialize Select\" value={name}>\r\n                            {this.state.userList.map(result =>\r\n                                <option onClick={this.userSelect}>{result.name}</option>\r\n\r\n                            )}\r\n                        </Input>\r\n                    </NavItem>\r\n                    <NavItem href={\"/create\"}>Create</NavItem>\r\n                    <NavItem href={\"/view\"}>View</NavItem>\r\n                    <NavItem onClick={this.logOut} href={\"/\"}>{this.state.loggedAs}: Log Out</NavItem>\r\n                </Navbar>\r\n                <div className='mapContainer'>\r\n                    <div id='map'></div>\r\n                </div>\r\n                        <DetailsCard2 data={this.state.userCitiesData}/>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default View;"]},"metadata":{},"sourceType":"module"}