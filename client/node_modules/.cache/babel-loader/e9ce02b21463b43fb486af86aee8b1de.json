{"ast":null,"code":"(function () {\n  \"use strict\";\n\n  var crypto = require('crypto');\n\n  var assert = require('assert');\n\n  var cryptoRandomBytes = crypto.pseudoRandomBytes || crypto.randomBytes;\n  var numeric = '0123456789';\n  var alphaLower = 'abcdefghijklmnopqrstuvwxyz';\n  var alphaUpper = alphaLower.toUpperCase(); // NOTE: This is explicitly in sortable order:\n\n  var alphaNumeric = numeric + alphaUpper + alphaLower;\n  var defaults = {\n    \"chars\": 'default',\n    \"source\": 'default'\n  };\n\n  function validateTokenChars(tokenChars) {\n    assert(tokenChars);\n    assert(typeof tokenChars == 'string');\n    assert(tokenChars.length > 0);\n    assert(tokenChars.length < 256);\n  }\n\n  function buildGenerator(options) {\n    assert(!options || typeof options == 'object');\n    options = options || {};\n    options.chars = options.chars || defaults.chars;\n    options.source = options.source || defaults.source; // Allowed characters\n\n    switch (options.chars) {\n      case 'default':\n        options.chars = alphaNumeric;\n        break;\n\n      case 'a-z':\n      case 'alpha':\n        options.chars = alphaLower;\n        break;\n\n      case 'A-Z':\n      case 'ALPHA':\n        options.chars = alphaUpper;\n        break;\n\n      case '0-9':\n      case 'numeric':\n        options.chars = numeric;\n        break;\n\n      case 'base32':\n        options.chars = alphaUpper + \"234567\";\n        break;\n\n      default: // use the characters as is\n\n    }\n\n    validateTokenChars(options.chars); // Source of randomness:\n\n    switch (options.source) {\n      case 'default':\n        options.source = cryptoRandomBytes;\n        break;\n\n      case 'crypto':\n        options.source = crypto.randomBytes;\n        break;\n\n      case 'math':\n        options.source = function (size) {\n          var buf = new Buffer(size);\n\n          for (var i = 0; i < size; i++) {\n            buf.writeUInt8(Math.floor(256 * Math.random()), i);\n          }\n\n          return buf;\n        };\n\n        break;\n\n      default:\n        assert(typeof options.source == 'function');\n    }\n\n    return {\n      \"generate\": function (size, chars) {\n        if (chars) {\n          validateTokenChars(chars);\n        } else {\n          chars = options.chars;\n        }\n\n        var max = Math.floor(256 / chars.length) * chars.length;\n        var ret = \"\";\n\n        while (ret.length < size) {\n          var buf = options.source(size - ret.length);\n\n          for (var i = 0; i < buf.length; i++) {\n            var x = buf.readUInt8(i);\n\n            if (x < max) {\n              ret += chars[x % chars.length];\n            }\n          }\n        }\n\n        return ret;\n      }\n    };\n  }\n\n  function base62(n) {\n    assert(n >= 0);\n    n = Math.floor(n);\n    var ret = [];\n\n    do {\n      var index = n % 62;\n      ret.push(alphaNumeric[index]);\n      n = Math.floor(n / 62);\n    } while (n > 0);\n\n    return ret.reverse().join(\"\");\n  } // Default epoch of \"2000-01-01T00:00:00+00:00\"\n\n\n  var defaultEpoch = 946684800000;\n  var defaultPrefixLength = 8;\n\n  function suidPrefix(epoch, prefixLength) {\n    var ret = base62(Date.now() - epoch);\n\n    while (ret.length < prefixLength) {\n      ret = \"0\" + ret;\n    }\n\n    return ret;\n  }\n\n  var defaultGenerator = buildGenerator();\n  module.exports = {\n    generator: buildGenerator,\n    generate: defaultGenerator.generate,\n    uid: defaultGenerator.generate,\n    suid: function (length, epoch, prefixLength) {\n      epoch = epoch || defaultEpoch;\n      prefixLength = prefixLength || defaultPrefixLength;\n      return suidPrefix(epoch, prefixLength) + defaultGenerator.generate(length);\n    }\n  };\n})();","map":{"version":3,"sources":["C:/Users/Fabricien/Documents/Projet/fabTravel/client/node_modules/rand-token/index.js"],"names":["crypto","require","assert","cryptoRandomBytes","pseudoRandomBytes","randomBytes","numeric","alphaLower","alphaUpper","toUpperCase","alphaNumeric","defaults","validateTokenChars","tokenChars","length","buildGenerator","options","chars","source","size","buf","Buffer","i","writeUInt8","Math","floor","random","max","ret","x","readUInt8","base62","n","index","push","reverse","join","defaultEpoch","defaultPrefixLength","suidPrefix","epoch","prefixLength","Date","now","defaultGenerator","module","exports","generator","generate","uid","suid"],"mappings":"AAAA,CAAC,YAAY;AACX;;AAEA,MAAIA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAApB;;AACA,MAAIC,MAAM,GAAGD,OAAO,CAAC,QAAD,CAApB;;AACA,MAAIE,iBAAiB,GAAGH,MAAM,CAACI,iBAAP,IAA4BJ,MAAM,CAACK,WAA3D;AAEA,MAAIC,OAAO,GAAG,YAAd;AACA,MAAIC,UAAU,GAAG,4BAAjB;AACA,MAAIC,UAAU,GAAGD,UAAU,CAACE,WAAX,EAAjB,CATW,CAUX;;AACA,MAAIC,YAAY,GAAGJ,OAAO,GAAGE,UAAV,GAAuBD,UAA1C;AAEA,MAAII,QAAQ,GAAG;AACb,aAAS,SADI;AAEb,cAAU;AAFG,GAAf;;AAKA,WAASC,kBAAT,CAA4BC,UAA5B,EAAwC;AACtCX,IAAAA,MAAM,CAACW,UAAD,CAAN;AACAX,IAAAA,MAAM,CAAC,OAAOW,UAAP,IAAsB,QAAvB,CAAN;AACAX,IAAAA,MAAM,CAACW,UAAU,CAACC,MAAX,GAAoB,CAArB,CAAN;AACAZ,IAAAA,MAAM,CAACW,UAAU,CAACC,MAAX,GAAoB,GAArB,CAAN;AACD;;AAED,WAASC,cAAT,CAAwBC,OAAxB,EAAiC;AAC/Bd,IAAAA,MAAM,CAAC,CAACc,OAAD,IAAY,OAAOA,OAAP,IAAmB,QAAhC,CAAN;AACAA,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACAA,IAAAA,OAAO,CAACC,KAAR,GAAgBD,OAAO,CAACC,KAAR,IAAiBN,QAAQ,CAACM,KAA1C;AACAD,IAAAA,OAAO,CAACE,MAAR,GAAiBF,OAAO,CAACE,MAAR,IAAkBP,QAAQ,CAACO,MAA5C,CAJ+B,CAM/B;;AACA,YAAQF,OAAO,CAACC,KAAhB;AACE,WAAK,SAAL;AACED,QAAAA,OAAO,CAACC,KAAR,GAAgBP,YAAhB;AACA;;AACF,WAAK,KAAL;AACA,WAAK,OAAL;AACEM,QAAAA,OAAO,CAACC,KAAR,GAAgBV,UAAhB;AACA;;AACF,WAAK,KAAL;AACA,WAAK,OAAL;AACES,QAAAA,OAAO,CAACC,KAAR,GAAgBT,UAAhB;AACA;;AACF,WAAK,KAAL;AACA,WAAK,SAAL;AACEQ,QAAAA,OAAO,CAACC,KAAR,GAAgBX,OAAhB;AACA;;AACF,WAAK,QAAL;AACEU,QAAAA,OAAO,CAACC,KAAR,GAAgBT,UAAU,GAAG,QAA7B;AACA;;AACF,cAnBF,CAoBI;;AApBJ;;AAsBAI,IAAAA,kBAAkB,CAACI,OAAO,CAACC,KAAT,CAAlB,CA7B+B,CA+B/B;;AACA,YAAQD,OAAO,CAACE,MAAhB;AACE,WAAK,SAAL;AACEF,QAAAA,OAAO,CAACE,MAAR,GAAiBf,iBAAjB;AACA;;AACF,WAAK,QAAL;AACEa,QAAAA,OAAO,CAACE,MAAR,GAAiBlB,MAAM,CAACK,WAAxB;AACA;;AACF,WAAK,MAAL;AACEW,QAAAA,OAAO,CAACE,MAAR,GAAiB,UAASC,IAAT,EAAe;AAC9B,cAAIC,GAAG,GAAG,IAAIC,MAAJ,CAAWF,IAAX,CAAV;;AACA,eAAI,IAAIG,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACH,IAAd,EAAmBG,CAAC,EAApB,EAAwB;AACtBF,YAAAA,GAAG,CAACG,UAAJ,CAAeC,IAAI,CAACC,KAAL,CAAW,MAAMD,IAAI,CAACE,MAAL,EAAjB,CAAf,EAAgDJ,CAAhD;AACD;;AACD,iBAAOF,GAAP;AACD,SAND;;AAOA;;AACF;AACElB,QAAAA,MAAM,CAAC,OAAOc,OAAO,CAACE,MAAf,IAA0B,UAA3B,CAAN;AAjBJ;;AAoBA,WAAO;AACL,kBAAY,UAASC,IAAT,EAAeF,KAAf,EAAsB;AAChC,YAAIA,KAAJ,EAAY;AACVL,UAAAA,kBAAkB,CAACK,KAAD,CAAlB;AACD,SAFD,MAEO;AACLA,UAAAA,KAAK,GAAGD,OAAO,CAACC,KAAhB;AACD;;AACD,YAAIU,GAAG,GAAGH,IAAI,CAACC,KAAL,CAAW,MAAMR,KAAK,CAACH,MAAvB,IAAiCG,KAAK,CAACH,MAAjD;AACA,YAAIc,GAAG,GAAG,EAAV;;AACA,eAAOA,GAAG,CAACd,MAAJ,GAAaK,IAApB,EAA2B;AACzB,cAAIC,GAAG,GAAGJ,OAAO,CAACE,MAAR,CAAeC,IAAI,GAAGS,GAAG,CAACd,MAA1B,CAAV;;AACA,eAAI,IAAIQ,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACF,GAAG,CAACN,MAAlB,EAAyBQ,CAAC,EAA1B,EAA8B;AAC5B,gBAAIO,CAAC,GAAGT,GAAG,CAACU,SAAJ,CAAcR,CAAd,CAAR;;AACA,gBAAIO,CAAC,GAAGF,GAAR,EAAc;AACZC,cAAAA,GAAG,IAAIX,KAAK,CAACY,CAAC,GAAGZ,KAAK,CAACH,MAAX,CAAZ;AACD;AACF;AACF;;AACD,eAAOc,GAAP;AACD;AAnBI,KAAP;AAqBD;;AAED,WAASG,MAAT,CAAgBC,CAAhB,EAAmB;AACjB9B,IAAAA,MAAM,CAAC8B,CAAC,IAAI,CAAN,CAAN;AACAA,IAAAA,CAAC,GAAGR,IAAI,CAACC,KAAL,CAAWO,CAAX,CAAJ;AACA,QAAIJ,GAAG,GAAG,EAAV;;AACA,OAAG;AACD,UAAIK,KAAK,GAAGD,CAAC,GAAG,EAAhB;AACAJ,MAAAA,GAAG,CAACM,IAAJ,CAASxB,YAAY,CAACuB,KAAD,CAArB;AACAD,MAAAA,CAAC,GAAGR,IAAI,CAACC,KAAL,CAAWO,CAAC,GAAG,EAAf,CAAJ;AACD,KAJD,QAISA,CAAC,GAAG,CAJb;;AAKA,WAAOJ,GAAG,CAACO,OAAJ,GAAcC,IAAd,CAAmB,EAAnB,CAAP;AACD,GA9GU,CAgHX;;;AACA,MAAIC,YAAY,GAAG,YAAnB;AACA,MAAIC,mBAAmB,GAAG,CAA1B;;AACA,WAASC,UAAT,CAAoBC,KAApB,EAA2BC,YAA3B,EAAyC;AACvC,QAAIb,GAAG,GAAGG,MAAM,CAACW,IAAI,CAACC,GAAL,KAAaH,KAAd,CAAhB;;AACA,WAAOZ,GAAG,CAACd,MAAJ,GAAa2B,YAApB,EAAmC;AACjCb,MAAAA,GAAG,GAAG,MAAMA,GAAZ;AACD;;AACD,WAAOA,GAAP;AACD;;AAED,MAAIgB,gBAAgB,GAAG7B,cAAc,EAArC;AAEA8B,EAAAA,MAAM,CAACC,OAAP,GAAiB;AACfC,IAAAA,SAAS,EAAEhC,cADI;AAEfiC,IAAAA,QAAQ,EAAEJ,gBAAgB,CAACI,QAFZ;AAGfC,IAAAA,GAAG,EAAEL,gBAAgB,CAACI,QAHP;AAIfE,IAAAA,IAAI,EAAE,UAASpC,MAAT,EAAiB0B,KAAjB,EAAwBC,YAAxB,EAAsC;AAC1CD,MAAAA,KAAK,GAAGA,KAAK,IAAIH,YAAjB;AACAI,MAAAA,YAAY,GAAGA,YAAY,IAAIH,mBAA/B;AACA,aAAOC,UAAU,CAACC,KAAD,EAAQC,YAAR,CAAV,GAAkCG,gBAAgB,CAACI,QAAjB,CAA0BlC,MAA1B,CAAzC;AACD;AARc,GAAjB;AAUD,CAvID","sourcesContent":["(function () {\r\n  \"use strict\";\r\n\r\n  var crypto = require('crypto');\r\n  var assert = require('assert');\r\n  var cryptoRandomBytes = crypto.pseudoRandomBytes || crypto.randomBytes;\r\n\r\n  var numeric = '0123456789';\r\n  var alphaLower = 'abcdefghijklmnopqrstuvwxyz';\r\n  var alphaUpper = alphaLower.toUpperCase();\r\n  // NOTE: This is explicitly in sortable order:\r\n  var alphaNumeric = numeric + alphaUpper + alphaLower;\r\n  \r\n  var defaults = {\r\n    \"chars\": 'default',\r\n    \"source\": 'default'\r\n  };\r\n\r\n  function validateTokenChars(tokenChars) {\r\n    assert(tokenChars);\r\n    assert(typeof(tokenChars) == 'string');\r\n    assert(tokenChars.length > 0);\r\n    assert(tokenChars.length < 256);\r\n  }\r\n\r\n  function buildGenerator(options) {\r\n    assert(!options || typeof(options) == 'object');\r\n    options = options || {};\r\n    options.chars = options.chars || defaults.chars;\r\n    options.source = options.source || defaults.source;\r\n\r\n    // Allowed characters\r\n    switch( options.chars ) {\r\n      case 'default':\r\n        options.chars = alphaNumeric;\r\n        break;\r\n      case 'a-z':\r\n      case 'alpha':\r\n        options.chars = alphaLower;\r\n        break;\r\n      case 'A-Z':\r\n      case 'ALPHA':\r\n        options.chars = alphaUpper;\r\n        break;\r\n      case '0-9':\r\n      case 'numeric':\r\n        options.chars = numeric;\r\n        break;\r\n      case 'base32':\r\n        options.chars = alphaUpper + \"234567\";\r\n        break;\r\n      default:\r\n        // use the characters as is\r\n    }\r\n    validateTokenChars(options.chars);\r\n\r\n    // Source of randomness:\r\n    switch( options.source ) {\r\n      case 'default':\r\n        options.source = cryptoRandomBytes;\r\n        break;\r\n      case 'crypto':\r\n        options.source = crypto.randomBytes;\r\n        break;\r\n      case 'math':\r\n        options.source = function(size) {\r\n          var buf = new Buffer(size);\r\n          for(var i=0;i<size;i++) {\r\n            buf.writeUInt8(Math.floor(256 * Math.random()), i);\r\n          }\r\n          return buf;\r\n        };\r\n        break;\r\n      default:\r\n        assert(typeof(options.source) == 'function');\r\n    }\r\n\r\n    return {\r\n      \"generate\": function(size, chars) {\r\n        if( chars ) {\r\n          validateTokenChars(chars);\r\n        } else {\r\n          chars = options.chars;\r\n        }\r\n        var max = Math.floor(256 / chars.length) * chars.length;\r\n        var ret = \"\";\r\n        while( ret.length < size ) {\r\n          var buf = options.source(size - ret.length);\r\n          for(var i=0;i<buf.length;i++) {\r\n            var x = buf.readUInt8(i);\r\n            if( x < max ) {\r\n              ret += chars[x % chars.length];\r\n            }\r\n          }\r\n        }\r\n        return ret;\r\n      }\r\n    };\r\n  }\r\n\r\n  function base62(n) {\r\n    assert(n >= 0);\r\n    n = Math.floor(n);\r\n    var ret = [];\r\n    do {\r\n      var index = n % 62;\r\n      ret.push(alphaNumeric[index]);\r\n      n = Math.floor(n / 62);\r\n    } while( n > 0);\r\n    return ret.reverse().join(\"\");\r\n  }\r\n\r\n  // Default epoch of \"2000-01-01T00:00:00+00:00\"\r\n  var defaultEpoch = 946684800000;\r\n  var defaultPrefixLength = 8;\r\n  function suidPrefix(epoch, prefixLength) {\r\n    var ret = base62(Date.now() - epoch);\r\n    while( ret.length < prefixLength ) {\r\n      ret = \"0\" + ret;\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  var defaultGenerator = buildGenerator();\r\n\r\n  module.exports = {\r\n    generator: buildGenerator,\r\n    generate: defaultGenerator.generate,\r\n    uid: defaultGenerator.generate,\r\n    suid: function(length, epoch, prefixLength) {\r\n      epoch = epoch || defaultEpoch;\r\n      prefixLength = prefixLength || defaultPrefixLength;\r\n      return suidPrefix(epoch, prefixLength) + defaultGenerator.generate(length);\r\n    }\r\n  };\r\n})();\r\n"]},"metadata":{},"sourceType":"script"}