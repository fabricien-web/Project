{"ast":null,"code":"'use strict';\n\nvar b64 = require('rest/util/base64');\n/**\r\n * Access tokens actually are data, and using them we can derive\r\n * a user's username. This method attempts to do just that,\r\n * decoding the part of the token after the first `.` into\r\n * a username.\r\n *\r\n * @private\r\n * @param {string} token an access token\r\n * @return {string} username\r\n */\n\n\nfunction getUser(token) {\n  var data = token.split('.')[1];\n  if (!data) return null;\n  data = data.replace(/-/g, '+').replace(/_/g, '/');\n  var mod = data.length % 4;\n  if (mod === 2) data += '==';\n  if (mod === 3) data += '=';\n  if (mod === 1 || mod > 3) return null;\n\n  try {\n    return JSON.parse(b64.decode(data)).u;\n  } catch (err) {\n    return null;\n  }\n}\n\nmodule.exports = getUser;","map":{"version":3,"sources":["C:/Users/Fabricien/Documents/Projet/fabTravel/client/node_modules/mapbox/lib/get_user.js"],"names":["b64","require","getUser","token","data","split","replace","mod","length","JSON","parse","decode","u","err","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,GAAG,GAAGC,OAAO,CAAC,kBAAD,CAAjB;AAEA;;;;;;;;;;;;AAUA,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AACtB,MAAIC,IAAI,GAAGD,KAAK,CAACE,KAAN,CAAY,GAAZ,EAAiB,CAAjB,CAAX;AACA,MAAI,CAACD,IAAL,EAAW,OAAO,IAAP;AACXA,EAAAA,IAAI,GAAGA,IAAI,CAACE,OAAL,CAAa,IAAb,EAAmB,GAAnB,EAAwBA,OAAxB,CAAgC,IAAhC,EAAsC,GAAtC,CAAP;AAEA,MAAIC,GAAG,GAAGH,IAAI,CAACI,MAAL,GAAc,CAAxB;AACA,MAAID,GAAG,KAAK,CAAZ,EAAeH,IAAI,IAAI,IAAR;AACf,MAAIG,GAAG,KAAK,CAAZ,EAAeH,IAAI,IAAI,GAAR;AACf,MAAIG,GAAG,KAAK,CAAR,IAAaA,GAAG,GAAG,CAAvB,EAA0B,OAAO,IAAP;;AAE1B,MAAI;AACF,WAAOE,IAAI,CAACC,KAAL,CAAWV,GAAG,CAACW,MAAJ,CAAWP,IAAX,CAAX,EAA6BQ,CAApC;AACD,GAFD,CAEE,OAAMC,GAAN,EAAW;AACX,WAAO,IAAP;AACD;AACF;;AAEDC,MAAM,CAACC,OAAP,GAAiBb,OAAjB","sourcesContent":["'use strict';\r\n\r\nvar b64 = require('rest/util/base64');\r\n\r\n/**\r\n * Access tokens actually are data, and using them we can derive\r\n * a user's username. This method attempts to do just that,\r\n * decoding the part of the token after the first `.` into\r\n * a username.\r\n *\r\n * @private\r\n * @param {string} token an access token\r\n * @return {string} username\r\n */\r\nfunction getUser(token) {\r\n  var data = token.split('.')[1];\r\n  if (!data) return null;\r\n  data = data.replace(/-/g, '+').replace(/_/g, '/');\r\n\r\n  var mod = data.length % 4;\r\n  if (mod === 2) data += '==';\r\n  if (mod === 3) data += '=';\r\n  if (mod === 1 || mod > 3) return null;\r\n\r\n  try {\r\n    return JSON.parse(b64.decode(data)).u;\r\n  } catch(err) {\r\n    return null;\r\n  }\r\n}\r\n\r\nmodule.exports = getUser;\r\n"]},"metadata":{},"sourceType":"script"}