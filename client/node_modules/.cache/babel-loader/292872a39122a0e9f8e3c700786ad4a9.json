{"ast":null,"code":"/*\r\n * Copyright 2013-2016 the original author or authors\r\n * @license MIT, see LICENSE.txt for details\r\n *\r\n * @author Scott Andrews\r\n */\n'use strict';\n\nvar interceptor, mixinUtil, defaulter;\ninterceptor = require('../interceptor');\nmixinUtil = require('../util/mixin');\n\ndefaulter = function () {\n  function mixin(prop, target, defaults) {\n    if (prop in target || prop in defaults) {\n      target[prop] = mixinUtil({}, defaults[prop], target[prop]);\n    }\n  }\n\n  function copy(prop, target, defaults) {\n    if (prop in defaults && !(prop in target)) {\n      target[prop] = defaults[prop];\n    }\n  }\n\n  var mappings = {\n    method: copy,\n    path: copy,\n    params: mixin,\n    headers: mixin,\n    entity: copy,\n    mixin: mixin\n  };\n  return function (target, defaults) {\n    for (var prop in mappings) {\n      /*jshint forin: false */\n      mappings[prop](prop, target, defaults);\n    }\n\n    return target;\n  };\n}();\n/**\r\n * Provide default values for a request. These values will be applied to the\r\n * request if the request object does not already contain an explicit value.\r\n *\r\n * For 'params', 'headers', and 'mixin', individual values are mixed in with the\r\n * request's values. The result is a new object representiing the combined\r\n * request and config values. Neither input object is mutated.\r\n *\r\n * @param {Client} [client] client to wrap\r\n * @param {string} [config.method] the default method\r\n * @param {string} [config.path] the default path\r\n * @param {Object} [config.params] the default params, mixed with the request's existing params\r\n * @param {Object} [config.headers] the default headers, mixed with the request's existing headers\r\n * @param {Object} [config.mixin] the default \"mixins\" (http/https options), mixed with the request's existing \"mixins\"\r\n *\r\n * @returns {Client}\r\n */\n\n\nmodule.exports = interceptor({\n  request: function handleRequest(request, config) {\n    return defaulter(request, config);\n  }\n});","map":{"version":3,"sources":["C:/Users/Fabricien/Documents/Projet/fabTravel/client/node_modules/rest/interceptor/defaultRequest.js"],"names":["interceptor","mixinUtil","defaulter","require","mixin","prop","target","defaults","copy","mappings","method","path","params","headers","entity","module","exports","request","handleRequest","config"],"mappings":"AAAA;;;;;;AAOA;;AAEA,IAAIA,WAAJ,EAAiBC,SAAjB,EAA4BC,SAA5B;AAEAF,WAAW,GAAGG,OAAO,CAAC,gBAAD,CAArB;AACAF,SAAS,GAAGE,OAAO,CAAC,eAAD,CAAnB;;AAEAD,SAAS,GAAI,YAAY;AAExB,WAASE,KAAT,CAAeC,IAAf,EAAqBC,MAArB,EAA6BC,QAA7B,EAAuC;AACtC,QAAIF,IAAI,IAAIC,MAAR,IAAkBD,IAAI,IAAIE,QAA9B,EAAwC;AACvCD,MAAAA,MAAM,CAACD,IAAD,CAAN,GAAeJ,SAAS,CAAC,EAAD,EAAKM,QAAQ,CAACF,IAAD,CAAb,EAAqBC,MAAM,CAACD,IAAD,CAA3B,CAAxB;AACA;AACD;;AAED,WAASG,IAAT,CAAcH,IAAd,EAAoBC,MAApB,EAA4BC,QAA5B,EAAsC;AACrC,QAAIF,IAAI,IAAIE,QAAR,IAAoB,EAAEF,IAAI,IAAIC,MAAV,CAAxB,EAA2C;AAC1CA,MAAAA,MAAM,CAACD,IAAD,CAAN,GAAeE,QAAQ,CAACF,IAAD,CAAvB;AACA;AACD;;AAED,MAAII,QAAQ,GAAG;AACdC,IAAAA,MAAM,EAAEF,IADM;AAEdG,IAAAA,IAAI,EAAEH,IAFQ;AAGdI,IAAAA,MAAM,EAAER,KAHM;AAIdS,IAAAA,OAAO,EAAET,KAJK;AAKdU,IAAAA,MAAM,EAAEN,IALM;AAMdJ,IAAAA,KAAK,EAAEA;AANO,GAAf;AASA,SAAO,UAAUE,MAAV,EAAkBC,QAAlB,EAA4B;AAClC,SAAK,IAAIF,IAAT,IAAiBI,QAAjB,EAA2B;AAC1B;AACAA,MAAAA,QAAQ,CAACJ,IAAD,CAAR,CAAeA,IAAf,EAAqBC,MAArB,EAA6BC,QAA7B;AACA;;AACD,WAAOD,MAAP;AACA,GAND;AAQA,CA/BY,EAAb;AAiCA;;;;;;;;;;;;;;;;;;;AAiBAS,MAAM,CAACC,OAAP,GAAiBhB,WAAW,CAAC;AAC5BiB,EAAAA,OAAO,EAAE,SAASC,aAAT,CAAuBD,OAAvB,EAAgCE,MAAhC,EAAwC;AAChD,WAAOjB,SAAS,CAACe,OAAD,EAAUE,MAAV,CAAhB;AACA;AAH2B,CAAD,CAA5B","sourcesContent":["/*\r\n * Copyright 2013-2016 the original author or authors\r\n * @license MIT, see LICENSE.txt for details\r\n *\r\n * @author Scott Andrews\r\n */\r\n\r\n'use strict';\r\n\r\nvar interceptor, mixinUtil, defaulter;\r\n\r\ninterceptor = require('../interceptor');\r\nmixinUtil = require('../util/mixin');\r\n\r\ndefaulter = (function () {\r\n\r\n\tfunction mixin(prop, target, defaults) {\r\n\t\tif (prop in target || prop in defaults) {\r\n\t\t\ttarget[prop] = mixinUtil({}, defaults[prop], target[prop]);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction copy(prop, target, defaults) {\r\n\t\tif (prop in defaults && !(prop in target)) {\r\n\t\t\ttarget[prop] = defaults[prop];\r\n\t\t}\r\n\t}\r\n\r\n\tvar mappings = {\r\n\t\tmethod: copy,\r\n\t\tpath: copy,\r\n\t\tparams: mixin,\r\n\t\theaders: mixin,\r\n\t\tentity: copy,\r\n\t\tmixin: mixin\r\n\t};\r\n\r\n\treturn function (target, defaults) {\r\n\t\tfor (var prop in mappings) {\r\n\t\t\t/*jshint forin: false */\r\n\t\t\tmappings[prop](prop, target, defaults);\r\n\t\t}\r\n\t\treturn target;\r\n\t};\r\n\r\n}());\r\n\r\n/**\r\n * Provide default values for a request. These values will be applied to the\r\n * request if the request object does not already contain an explicit value.\r\n *\r\n * For 'params', 'headers', and 'mixin', individual values are mixed in with the\r\n * request's values. The result is a new object representiing the combined\r\n * request and config values. Neither input object is mutated.\r\n *\r\n * @param {Client} [client] client to wrap\r\n * @param {string} [config.method] the default method\r\n * @param {string} [config.path] the default path\r\n * @param {Object} [config.params] the default params, mixed with the request's existing params\r\n * @param {Object} [config.headers] the default headers, mixed with the request's existing headers\r\n * @param {Object} [config.mixin] the default \"mixins\" (http/https options), mixed with the request's existing \"mixins\"\r\n *\r\n * @returns {Client}\r\n */\r\nmodule.exports = interceptor({\r\n\trequest: function handleRequest(request, config) {\r\n\t\treturn defaulter(request, config);\r\n\t}\r\n});\r\n"]},"metadata":{},"sourceType":"script"}