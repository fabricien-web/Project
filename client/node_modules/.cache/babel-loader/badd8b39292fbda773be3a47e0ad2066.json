{"ast":null,"code":"/*\r\n * Copyright 2013-2016 the original author or authors\r\n * @license MIT, see LICENSE.txt for details\r\n *\r\n * @author Scott Andrews\r\n */\n'use strict';\n\nvar pathPrefix, template, find, lazyPromise, responsePromise;\npathPrefix = require('../../../interceptor/pathPrefix');\ntemplate = require('../../../interceptor/template');\nfind = require('../../../util/find');\nlazyPromise = require('../../../util/lazyPromise');\nresponsePromise = require('../../../util/responsePromise');\n\nfunction defineProperty(obj, name, value) {\n  Object.defineProperty(obj, name, {\n    value: value,\n    configurable: true,\n    enumerable: false,\n    writeable: true\n  });\n}\n/**\r\n * Hypertext Application Language serializer\r\n *\r\n * Implemented to https://tools.ietf.org/html/draft-kelly-json-hal-06\r\n *\r\n * As the spec is still a draft, this implementation will be updated as the\r\n * spec evolves\r\n *\r\n * Objects are read as HAL indexing links and embedded objects on to the\r\n * resource. Objects are written as plain JSON.\r\n *\r\n * Embedded relationships are indexed onto the resource by the relationship\r\n * as a promise for the related resource.\r\n *\r\n * Links are indexed onto the resource as a lazy promise that will GET the\r\n * resource when a handler is first registered on the promise.\r\n *\r\n * A `requestFor` method is added to the entity to make a request for the\r\n * relationship.\r\n *\r\n * A `clientFor` method is added to the entity to get a full Client for a\r\n * relationship.\r\n *\r\n * The `_links` and `_embedded` properties on the resource are made\r\n * non-enumerable.\r\n */\n\n\nmodule.exports = {\n  read: function (str, opts) {\n    var client, console;\n    opts = opts || {};\n    client = opts.client;\n    console = opts.console || console;\n\n    function deprecationWarning(relationship, deprecation) {\n      if (deprecation && console && console.warn || console.log) {\n        (console.warn || console.log).call(console, 'Relationship \\'' + relationship + '\\' is deprecated, see ' + deprecation);\n      }\n    }\n\n    return opts.registry.lookup(opts.mime.suffix).then(function (converter) {\n      return converter.read(str, opts);\n    }).then(function (root) {\n      find.findProperties(root, '_embedded', function (embedded, resource, name) {\n        Object.keys(embedded).forEach(function (relationship) {\n          if (relationship in resource) {\n            return;\n          }\n\n          var related = responsePromise({\n            entity: embedded[relationship]\n          });\n          defineProperty(resource, relationship, related);\n        });\n        defineProperty(resource, name, embedded);\n      });\n      find.findProperties(root, '_links', function (links, resource, name) {\n        Object.keys(links).forEach(function (relationship) {\n          var link = links[relationship];\n\n          if (relationship in resource) {\n            return;\n          }\n\n          defineProperty(resource, relationship, responsePromise.make(lazyPromise(function () {\n            if (link.deprecation) {\n              deprecationWarning(relationship, link.deprecation);\n            }\n\n            if (link.templated === true) {\n              return template(client)({\n                path: link.href\n              });\n            }\n\n            return client({\n              path: link.href\n            });\n          })));\n        });\n        defineProperty(resource, name, links);\n        defineProperty(resource, 'clientFor', function (relationship, clientOverride) {\n          var link = links[relationship];\n\n          if (!link) {\n            throw new Error('Unknown relationship: ' + relationship);\n          }\n\n          if (link.deprecation) {\n            deprecationWarning(relationship, link.deprecation);\n          }\n\n          if (link.templated === true) {\n            return template(clientOverride || client, {\n              template: link.href\n            });\n          }\n\n          return pathPrefix(clientOverride || client, {\n            prefix: link.href\n          });\n        });\n        defineProperty(resource, 'requestFor', function (relationship, request, clientOverride) {\n          var client = this.clientFor(relationship, clientOverride);\n          return client(request);\n        });\n      });\n      return root;\n    });\n  },\n  write: function (obj, opts) {\n    return opts.registry.lookup(opts.mime.suffix).then(function (converter) {\n      return converter.write(obj, opts);\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/Fabricien/Documents/Projet/fabTravel/client/node_modules/rest/mime/type/application/hal.js"],"names":["pathPrefix","template","find","lazyPromise","responsePromise","require","defineProperty","obj","name","value","Object","configurable","enumerable","writeable","module","exports","read","str","opts","client","console","deprecationWarning","relationship","deprecation","warn","log","call","registry","lookup","mime","suffix","then","converter","root","findProperties","embedded","resource","keys","forEach","related","entity","links","link","make","templated","path","href","clientOverride","Error","prefix","request","clientFor","write"],"mappings":"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","sourcesContent":["/*\r\n * Copyright 2013-2016 the original author or authors\r\n * @license MIT, see LICENSE.txt for details\r\n *\r\n * @author Scott Andrews\r\n */\r\n\r\n'use strict';\r\n\r\nvar pathPrefix, template, find, lazyPromise, responsePromise;\r\n\r\npathPrefix = require('../../../interceptor/pathPrefix');\r\ntemplate = require('../../../interceptor/template');\r\nfind = require('../../../util/find');\r\nlazyPromise = require('../../../util/lazyPromise');\r\nresponsePromise = require('../../../util/responsePromise');\r\n\r\nfunction defineProperty(obj, name, value) {\r\n\tObject.defineProperty(obj, name, {\r\n\t\tvalue: value,\r\n\t\tconfigurable: true,\r\n\t\tenumerable: false,\r\n\t\twriteable: true\r\n\t});\r\n}\r\n\r\n/**\r\n * Hypertext Application Language serializer\r\n *\r\n * Implemented to https://tools.ietf.org/html/draft-kelly-json-hal-06\r\n *\r\n * As the spec is still a draft, this implementation will be updated as the\r\n * spec evolves\r\n *\r\n * Objects are read as HAL indexing links and embedded objects on to the\r\n * resource. Objects are written as plain JSON.\r\n *\r\n * Embedded relationships are indexed onto the resource by the relationship\r\n * as a promise for the related resource.\r\n *\r\n * Links are indexed onto the resource as a lazy promise that will GET the\r\n * resource when a handler is first registered on the promise.\r\n *\r\n * A `requestFor` method is added to the entity to make a request for the\r\n * relationship.\r\n *\r\n * A `clientFor` method is added to the entity to get a full Client for a\r\n * relationship.\r\n *\r\n * The `_links` and `_embedded` properties on the resource are made\r\n * non-enumerable.\r\n */\r\nmodule.exports = {\r\n\r\n\tread: function (str, opts) {\r\n\t\tvar client, console;\r\n\r\n\t\topts = opts || {};\r\n\t\tclient = opts.client;\r\n\t\tconsole = opts.console || console;\r\n\r\n\t\tfunction deprecationWarning(relationship, deprecation) {\r\n\t\t\tif (deprecation && console && console.warn || console.log) {\r\n\t\t\t\t(console.warn || console.log).call(console, 'Relationship \\'' + relationship + '\\' is deprecated, see ' + deprecation);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn opts.registry.lookup(opts.mime.suffix).then(function (converter) {\r\n\t\t\treturn converter.read(str, opts);\r\n\t\t}).then(function (root) {\r\n\t\t\tfind.findProperties(root, '_embedded', function (embedded, resource, name) {\r\n\t\t\t\tObject.keys(embedded).forEach(function (relationship) {\r\n\t\t\t\t\tif (relationship in resource) { return; }\r\n\t\t\t\t\tvar related = responsePromise({\r\n\t\t\t\t\t\tentity: embedded[relationship]\r\n\t\t\t\t\t});\r\n\t\t\t\t\tdefineProperty(resource, relationship, related);\r\n\t\t\t\t});\r\n\t\t\t\tdefineProperty(resource, name, embedded);\r\n\t\t\t});\r\n\t\t\tfind.findProperties(root, '_links', function (links, resource, name) {\r\n\t\t\t\tObject.keys(links).forEach(function (relationship) {\r\n\t\t\t\t\tvar link = links[relationship];\r\n\t\t\t\t\tif (relationship in resource) { return; }\r\n\t\t\t\t\tdefineProperty(resource, relationship, responsePromise.make(lazyPromise(function () {\r\n\t\t\t\t\t\tif (link.deprecation) { deprecationWarning(relationship, link.deprecation); }\r\n\t\t\t\t\t\tif (link.templated === true) {\r\n\t\t\t\t\t\t\treturn template(client)({ path: link.href });\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn client({ path: link.href });\r\n\t\t\t\t\t})));\r\n\t\t\t\t});\r\n\t\t\t\tdefineProperty(resource, name, links);\r\n\t\t\t\tdefineProperty(resource, 'clientFor', function (relationship, clientOverride) {\r\n\t\t\t\t\tvar link = links[relationship];\r\n\t\t\t\t\tif (!link) {\r\n\t\t\t\t\t\tthrow new Error('Unknown relationship: ' + relationship);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (link.deprecation) { deprecationWarning(relationship, link.deprecation); }\r\n\t\t\t\t\tif (link.templated === true) {\r\n\t\t\t\t\t\treturn template(\r\n\t\t\t\t\t\t\tclientOverride || client,\r\n\t\t\t\t\t\t\t{ template: link.href }\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn pathPrefix(\r\n\t\t\t\t\t\tclientOverride || client,\r\n\t\t\t\t\t\t{ prefix: link.href }\r\n\t\t\t\t\t);\r\n\t\t\t\t});\r\n\t\t\t\tdefineProperty(resource, 'requestFor', function (relationship, request, clientOverride) {\r\n\t\t\t\t\tvar client = this.clientFor(relationship, clientOverride);\r\n\t\t\t\t\treturn client(request);\r\n\t\t\t\t});\r\n\t\t\t});\r\n\r\n\t\t\treturn root;\r\n\t\t});\r\n\r\n\t},\r\n\r\n\twrite: function (obj, opts) {\r\n\t\treturn opts.registry.lookup(opts.mime.suffix).then(function (converter) {\r\n\t\t\treturn converter.write(obj, opts);\r\n\t\t});\r\n\t}\r\n\r\n};\r\n"]},"metadata":{},"sourceType":"script"}